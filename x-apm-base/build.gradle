import groovy.xml.XmlUtil

apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion as int
    // buildToolsVersion rootProject.ext.buildToolsVersion as String

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion as int
        targetSdkVersion rootProject.ext.compileSdkVersion as int
        versionCode rootProject.ext.versionCode as int
        versionName rootProject.ext.versionName
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "String", "UPDATE_LOGS", "\"${rootProject.ext.updateLogs}\""
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "String", "UPDATE_LOGS", "\"${rootProject.ext.updateLogs}\""
        }
    }
    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    testImplementation 'junit:junit:4.12'

    // Framework
    compileOnly files('../hidden-api/android-27.jar')
    compileOnly files('../hidden-api/services-27.jar')

    annotationProcessor 'org.projectlombok:lombok:1.16.18'
    compileOnly 'org.projectlombok:lombok:1.16.18'

    implementation 'com.google.guava:guava:20.0'
    implementation 'com.google.code.gson:gson:2.8.4'

    compileOnly 'de.robv.android.xposed:api:82'
}


def siteUrl = 'https://github.com/Tornaco/X-APM'    // project homepage
def gitUrl = 'https://github.com/Tornaco/X-APM.git' // project git

group = "github.tornaco"
version = "1.0.5"

install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'
                name 'X-APM base definations.'
                url siteUrl
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id 'potestadetornaco'
                        name 'potestadetornaco'
                        email 'tornaco@163.com'
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl
                }
            }
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    failOnError = false
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

// javadoc configuration
javadoc {
    options {
        encoding "UTF-8"
        charSet 'UTF-8'
        author true
        links "http://docs.oracle.com/javase/7/docs/api"
    }
}

Properties properties = new Properties()
// No need to load props for dog food build, publish lib is only need for project owner@tornaco.
boolean dogFoodBuild = rootProject.ext.dogfoodBuild as boolean
if (System.getenv("TRAVIS") != "true" && !dogFoodBuild) {
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
}

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")
    configurations = ['archives']
    pkg {
        repo = "android"
        name = "x-apm-base"
        // #CONFIG# project name in jcenter
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = ["Apache-2.0"]
        publish = System.getenv("TRAVIS") != "true"
    }
}

preBuild {
    doLast {
        def imlFile = file(project.name + ".iml")
        println 'Change ' + project.name + '.iml order'
        try {
            def parsedXml = (new XmlParser()).parse(imlFile)
            def jdkNode = parsedXml.component[1].orderEntry.find { it.'@type' == 'jdk' }
            parsedXml.component[1].remove(jdkNode)
            def sdkString = "Android API " + android.compileSdkVersion.substring("android-".length()) + " Platform"
            //noinspection GroovyResultOfObjectAllocationIgnored
            new Node(parsedXml.component[1], 'orderEntry', ['type': 'jdk', 'jdkName': sdkString, 'jdkType': 'Android SDK'])
            XmlUtil.serialize(parsedXml, new FileOutputStream(imlFile))
        } catch (FileNotFoundException e) {
            // nop, iml not found
        }
    }
}